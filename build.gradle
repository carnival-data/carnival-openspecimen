buildscript {
    repositories {
        mavenCentral()
        jcenter()
        mavenLocal()
    }
    dependencies {
        classpath group:'org.carnival', name:'carnival-gradle', version:'2.1.0-SNAPSHOT'
    }    
}

plugins {
    id "groovy"
    id 'maven-publish'
    id 'com.github.ManifestClasspath' version '0.1.0-RELEASE'
}
apply plugin: 'carnival.library'

version "0.1-SNAPSHOT"
group "org.carnival"

repositories {
    mavenCentral()
    jcenter()
    mavenLocal()
}

dependencies {
    implementation("io.micronaut:micronaut-http-client:2.1.2")
}


java {
    sourceCompatibility = JavaVersion.toVersion('11')
    targetCompatibility = JavaVersion.toVersion('11')
}

test {
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}



///////////////////////////////////////////////////////////////////////////////
// maven publishing
///////////////////////////////////////////////////////////////////////////////
publishToMavenLocal.dependsOn 'compileGroovy'

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    from sourceSets.main.allGroovy
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    from groovydoc
    classifier = 'javadoc'
}

publishing {
    publications {
        mavenGroovy(MavenPublication) {
            artifactId = 'carnival-openspecimen'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'Carnival OpenSpecimen'
                    description 'Core components for OpenSpecimen'
                    url 'https://github.com/pmbb-ibi/carnival-openspecimen'
                    developers {
						developer {
                            id 'augustearth'
                            name 'David Birtwell'
                            email 'augustearth@gmail.com'
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}


